AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  url_saver

Parameters:
  DomainName:
    Type: String
    Default: 
  APIDomainName:
    Type: String
    Default: 
  HostedZoneName:
    Type: String
    Default: 
  CertificateArn:
    Type: String
    Default: 
    Description: ARN of ACM certificate
  TableName:
    Type: String
    Default: url-saver
  CreateTable:
    Type: String
    Default: false
    AllowedValues: [true, false]
    Description: Whether to create a new DynamoDB table

Conditions:
  ShouldCreateTable: !Equals [!Ref CreateTable, 'true']

Globals:
  Function:
    Timeout: 10
    MemorySize: 256
    Tracing: Active
    LoggingConfig:
      LogFormat: JSON
  Api:
    TracingEnabled: true
  
Resources:
  UrlTable:
    Type: AWS::DynamoDB::Table
    Condition: ShouldCreateTable
    DeletionPolicy: Retain
    Properties:
      TableName: url-saver
      AttributeDefinitions:
        - AttributeName: hash
          AttributeType: S
        - AttributeName: ou
          AttributeType: S
        - AttributeName: ui
          AttributeType: S
        - AttributeName: ca
          AttributeType: N
      KeySchema:
        - AttributeName: hash
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: url-index
          KeySchema:
            - AttributeName: ou
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: user-index
          KeySchema:
            - AttributeName: ui
              KeyType: HASH
            - AttributeName: ca
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  CreateUrlFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: create-url
      CodeUri: ./
      Handler: functions.create.app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
          DOMAIN: !Ref APIDomainName
          REGION: ap-northeast-2
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
        - AmazonAPIGatewayAdministrator
      Events:
        CreateUrl:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi2
            Path: /url
            Method: POST

  RedirectFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: redirect-url
      CodeUri: ./
      Handler: functions.redirect.app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
          REGION: ap-northeast-2
          PYTHONPATH: /var/task
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
        - AmazonAPIGatewayAdministrator
        
      Events:
        RedirectUrl:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /{hash}
            Method: GET

  CrudFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: crud-url
      CodeUri: ./
      Handler: functions.crud.app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
          REGION: ap-northeast-2
          PYTHONPATH: /var/task
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
      Events:
        UpdateUrl:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi2
            Path: /update
            Method: PUT
        GetUrl:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi2
            Path: /get
            Method: GET
        GetAllUrl:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi2
            Path: /get-all
            Method: POST
        DeleteUrl:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi2
            Path: /delete
            Method: DELETE

  DnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Ref HostedZoneName
      Name: !Ref DomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt ApiGatewayDomainName.RegionalDomainName
        HostedZoneId: !GetAtt ApiGatewayDomainName.RegionalHostedZoneId

  DnsRecord2:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Ref HostedZoneName
      Name: !Ref APIDomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt ApiGatewayDomainName.RegionalDomainName
        HostedZoneId: !GetAtt ApiGatewayDomainName.RegionalHostedZoneId

  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      EndpointConfiguration: 
        Type: REGIONAL

  ApiGatewayApi2:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      EndpointConfiguration: 
        Type: REGIONAL

  ApiGatewayDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !Ref DomainName
      RegionalCertificateArn: !Ref CertificateArn
      EndpointConfiguration:
        Types: 
          - REGIONAL
      SecurityPolicy: TLS_1_2

  ApiGatewayDomainName2:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !Ref APIDomainName
      RegionalCertificateArn: !Ref CertificateArn
      EndpointConfiguration:
        Types: 
          - REGIONAL
      SecurityPolicy: TLS_1_2
  
  ApiGatewayMapping:
    Type: AWS::ApiGateway::BasePathMapping
    DependsOn:
      - ApiGatewayApi
      - ApiGatewayDomainName
    Properties:
      DomainName: !Ref DomainName
      RestApiId: !Ref ApiGatewayApi
      Stage: Prod

  ApiGatewayMapping2:
    Type: AWS::ApiGateway::BasePathMapping
    DependsOn:
      - ApiGatewayApi2
      - ApiGatewayDomainName2
    Properties:
      DomainName: !Ref APIDomainName
      RestApiId: !Ref ApiGatewayApi2
      Stage: Prod